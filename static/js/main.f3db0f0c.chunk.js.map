{"version":3,"sources":["User.js","App.js","serviceWorker.js","index.js"],"names":["User","props","children","number","id","className","onClick","onDelete","App","deleteEvent","index","e","cont","Object","assign","state","contacts","splice","setState","onEnterName","event","name","target","value","console","log","onEnterNumber","event2","onAdd","event3","newname","newnumber","push","onSearch","event4","searchfield","filteredcontacts","this","filter","contact","toLowerCase","includes","type","onChange","placeholder","map","val","key","bind","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2PAYeA,G,WATJ,SAACC,GACX,OACC,4BACC,uCAAaA,EAAMC,SAAnB,aAAuCD,EAAME,QAC7C,4BAAQC,GAAG,MAAMC,UAAU,kBAAkBC,QAASL,EAAMM,UAA5D,aCgFYC,E,YAjFX,aAAc,IAAD,uBACT,+CAYJC,YAAa,SAACC,EAAMC,GAChB,EAAKC,KAAKC,OAAOC,OAAO,GAAG,EAAKC,MAAMC,UACtC,EAAKJ,KAAKK,OAAOP,EAAM,GACvB,EAAKQ,SAAS,CAACF,SAAS,EAAKJ,QAhBpB,EAmBbO,YAAc,SAACC,GACX,EAAKF,SAAS,CAACG,KAAKD,EAAME,OAAOC,QACjCC,QAAQC,IAAIL,EAAME,OAAOC,QArBhB,EAwBbG,cAAgB,SAACC,GACb,EAAKT,SAAS,CAACf,OAAOwB,EAAOL,OAAOC,QACpCC,QAAQC,IAAIE,EAAOL,OAAOC,QA1BjB,EA6BbK,MAAQ,SAACC,GACL,IAAIC,EAAQ,EAAKf,MAAMM,KACnBU,EAAU,EAAKhB,MAAMZ,OACrB2B,GAAYC,IAGhB,EAAKhB,MAAMC,SAASgB,KAAK,CAACX,KAAKS,EAAQ3B,OAAO4B,IAC9C,EAAKb,SAAS,CAACG,KAAK,GAAGlB,OAAO,OApCrB,EAuCb8B,SAAW,SAACC,GAER,EAAKhB,SAAS,CAACiB,YAAYD,EAAOZ,OAAOC,QACzCC,QAAQC,IAAIS,EAAOZ,OAAOC,QAxC1B,EAAKR,MAAM,CACPM,KAAK,GACLlB,OAAO,GACPgC,YAAY,GACZnB,SAAU,CACV,CAACK,KAAK,SAASlB,OAAO,UACtB,CAACkB,KAAK,QAAQlB,OAAO,YARhB,S,sEA6CH,IAAD,OACDiC,EAAiBC,KAAKtB,MAAMC,SAASsB,OACrC,SAACC,GACG,OAAOA,EAAQlB,KAAKmB,cAAcC,SAAS,EAAK1B,MAAMoB,YAAYK,iBAG1E,OACI,yBAAKnC,UAAU,MACX,yCACA,2BAAOqC,KAAK,OAAOrC,UAAU,kBAAkBkB,MAAOc,KAAKtB,MAAMM,KAAMsB,SAAUN,KAAKlB,YAAayB,YAAY,eAC/G,2BAAOF,KAAK,OAAOrC,UAAU,kBAAkBkB,MAAOc,KAAKtB,MAAMZ,OAAQwC,SAAUN,KAAKX,cAAekB,YAAY,iBACnH,2BAAOF,KAAK,SAASrC,UAAU,kBAAkBsC,SAAUN,KAAKJ,SAAUW,YAAY,WACtF,4BAAQF,KAAK,MAAMrC,UAAU,kBAAkBC,QAAS+B,KAAKT,OAA7D,OACA,yBAAKxB,GAAG,gBACJ,6BADJ,0BACgC,6BADhC,SAEWiC,KAAKtB,MAAMM,KAAK,6BAF3B,WAGagB,KAAKtB,MAAMZ,OAAO,8BAE/B,6BACI,wBAAIuC,KAAK,OAAOtC,GAAG,WAEXgC,EAAiBS,IAAI,SAACC,EAAIpC,GACtB,OAAO,kBAAC,EAAD,CACPqC,IAAKrC,EACLP,OAAQ2C,EAAI3C,OACZI,SAAU,EAAKE,YAAYuC,KAAK,EAAKtC,IAASoC,EAAIzB,e,GAvEhE4B,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.f3db0f0c.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'tachyons'\r\n\r\nconst User=(props)=>{\r\n\treturn(\r\n\t\t<li>\r\n\t\t\t<span>Name: {props.children}, Number: {props.number}</span>\r\n\t\t\t<button id=\"del\" className='ma1 pa1 tc grow' onClick={props.onDelete}>Delete</button>\r\n\t\t</li>\r\n\t)\r\n}\r\n\r\nexport default User;","import React, { Component } from 'react';\nimport './App.css';\nimport User from './User'\nimport 'tachyons'\n\nclass App extends Component {\n    constructor(){\n        super();\n        this.state={\n            name:'',\n            number:'',\n            searchfield:'',\n            contacts: [\n            {name:'vishal',number:95679980},\n            {name:'shubh',number:78678903}\n        ]}\n        let filteredcontacts=[];\n    }\n    //to delete a contact\n    deleteEvent= (index,e) => {\n        this.cont=Object.assign([],this.state.contacts)\n        this.cont.splice(index,1);\n        this.setState({contacts:this.cont})\n    }\n    //to Enter name\n    onEnterName = (event) => {\n        this.setState({name:event.target.value})\n        console.log(event.target.value)\n    }\n    //to enter number\n    onEnterNumber = (event2) => {\n        this.setState({number:event2.target.value})\n        console.log(event2.target.value)\n    }\n    //on clicking Add button\n    onAdd = (event3) => {\n        let newname=this.state.name;\n        let newnumber=this.state.number;\n        if(!newname || !newnumber){\n            return\n        }\n        this.state.contacts.push({name:newname,number:newnumber})\n        this.setState({name:'',number:''})\n    }\n    //to search\n    onSearch = (event4) =>\n    {\n        this.setState({searchfield:event4.target.value})\n        console.log(event4.target.value)\n    }\n\n    render() {\n        let filteredcontacts=this.state.contacts.filter(\n            (contact) => {\n                return contact.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\n            }\n        );\n        return(\n            <div className='tc'>\n                <h1>PHONEBOOK</h1>\n                <input type='text' className='tc ma3 pa2 grow' value={this.state.name} onChange={this.onEnterName} placeholder='Enter Name'/>\n                <input type='text' className='tc ma3 pa2 grow' value={this.state.number} onChange={this.onEnterNumber} placeholder='Enter Number'/>\n                <input type='search' className='tc ma3 pa2 grow' onChange={this.onSearch} placeholder='Search'/>\n                <button type='Add' className='tc ma2 pa2 grow' onClick={this.onAdd}>Add</button>\n                <div id='statedisplay'>\n                    <br/>New contact to be added<br/>\n                    Name: {this.state.name}<br/>\n                    Number: {this.state.number}<br/>\n                </div>\n                <div>\n                    <ul type='none' id='contact'>\n                        {\n                            filteredcontacts.map((val,index)=>{\n                                return(<User\n                                key={index}\n                                number={val.number} \n                                onDelete={this.deleteEvent.bind(this,index)}>{val.name}</User>)\n                            })\n                        }\n                    </ul>\n                </div>\n                \n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}